// <auto-generated />
using System;
using CustorPortalAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustorPortalAPI.Migrations
{
    [DbContext(typeof(CustorPortalDbContext))]
    partial class CustorPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustorPortalAPI.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mentions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mentions");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.File", b =>
                {
                    b.Property<int>("FileKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FileKey");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileKey"));

                    b.Property<string>("File_Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("File_Name");

                    b.Property<string>("File_Path")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("File_Path");

                    b.Property<string>("File_Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("File_Type");

                    b.Property<bool?>("Is_Current")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Current");

                    b.Property<int>("ProjectKey")
                        .HasColumnType("int")
                        .HasColumnName("ProjectKey");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("Size");

                    b.Property<DateTime>("Uploaded_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("Uploaded_At");

                    b.Property<int>("UploaderKey")
                        .HasColumnType("int")
                        .HasColumnName("UploaderKey");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("Version");

                    b.HasKey("FileKey");

                    b.HasIndex("ProjectKey");

                    b.HasIndex("UploaderKey");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Project", b =>
                {
                    b.Property<int>("ProjectKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("projectKey");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectKey"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("creatorKey")
                        .HasColumnType("int")
                        .HasColumnName("creatorKey");

                    b.HasKey("ProjectKey");

                    b.HasIndex("creatorKey");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleKey");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleKey"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role_Name");

                    b.HasKey("RoleKey");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Task", b =>
                {
                    b.Property<int>("TaskKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskKey"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Low");

                    b.Property<int>("ProjectKey")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("To Do");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskKey");

                    b.HasIndex("CreatorKey");

                    b.HasIndex("ProjectKey");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.TaskAssignee", b =>
                {
                    b.Property<int>("Taskkey")
                        .HasColumnType("int");

                    b.Property<int>("UserKey")
                        .HasColumnType("int");

                    b.HasKey("Taskkey", "UserKey");

                    b.HasIndex("UserKey");

                    b.ToTable("TaskAssignees", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.User", b =>
                {
                    b.Property<int>("UserKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserKey");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserKey"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_At");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("First_Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("First_Name");

                    b.Property<bool?>("Is_Active")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<string>("Last_Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Password_Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password_Hash");

                    b.Property<int>("RoleKey")
                        .HasColumnType("int")
                        .HasColumnName("RoleKey");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated_At");

                    b.HasKey("UserKey");

                    b.HasIndex("RoleKey");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.UserProject", b =>
                {
                    b.Property<int>("UserKey")
                        .HasColumnType("int")
                        .HasColumnName("UserKey");

                    b.Property<int>("ProjectKey")
                        .HasColumnType("int")
                        .HasColumnName("ProjectKey");

                    b.Property<DateTime>("Assigned_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("Assigned_at");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.HasKey("UserKey", "ProjectKey");

                    b.HasIndex("ProjectKey");

                    b.ToTable("UserProjects", (string)null);
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Comment", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.File", "Document")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentId");

                    b.HasOne("CustorPortalAPI.Models.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId");

                    b.HasOne("CustorPortalAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.File", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.Project", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustorPortalAPI.Models.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Notification", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Project", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("creatorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Task", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustorPortalAPI.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.TaskAssignee", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.Task", "Task")
                        .WithMany("TaskAssignees")
                        .HasForeignKey("Taskkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustorPortalAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.User", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.UserProject", b =>
                {
                    b.HasOne("CustorPortalAPI.Models.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustorPortalAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.File", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Project", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Tasks");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CustorPortalAPI.Models.Task", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TaskAssignees");
                });
#pragma warning restore 612, 618
        }
    }
}
